//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by Entitas.CodeGenerator.ComponentExtensionsGenerator.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
namespace Entitas {
    public partial class Entity {
        static readonly RMC.EntitasCoverShooter.Entitas.Components.EnemyComponent enemyComponent = new RMC.EntitasCoverShooter.Entitas.Components.EnemyComponent();

        public bool isEnemy {
            get { return HasComponent(ComponentIds.Enemy); }
            set {
                if (value != isEnemy) {
                    if (value) {
                        AddComponent(ComponentIds.Enemy, enemyComponent);
                    } else {
                        RemoveComponent(ComponentIds.Enemy);
                    }
                }
            }
        }

        public Entity IsEnemy(bool value) {
            isEnemy = value;
            return this;
        }
    }

    public partial class Pool {
        public Entity enemyEntity { get { return GetGroup(Matcher.Enemy).GetSingleEntity(); } }

        public bool isEnemy {
            get { return enemyEntity != null; }
            set {
                var entity = enemyEntity;
                if (value != (entity != null)) {
                    if (value) {
                        CreateEntity().isEnemy = true;
                    } else {
                        DestroyEntity(entity);
                    }
                }
            }
        }
    }

    public partial class Matcher {
        static IMatcher _matcherEnemy;

        public static IMatcher Enemy {
            get {
                if (_matcherEnemy == null) {
                    var matcher = (Matcher)Matcher.AllOf(ComponentIds.Enemy);
                    matcher.componentNames = ComponentIds.componentNames;
                    _matcherEnemy = matcher;
                }

                return _matcherEnemy;
            }
        }
    }
}
